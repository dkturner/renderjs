#extension GL_EXT_frag_depth : enable
precision highp float;

uniform sampler2D uWireframe;
uniform vec2 uViewportSize;
uniform mat4 uViewportMatrix;
uniform mat4 uViewportMatrixInverse;

varying vec2 vTextureCoord;

void main(void) {
    vec4 pix = texture2D(uWireframe, vTextureCoord);
    if (pix.a == 0.0) {
        discard;
    } else {
        vec2 onePixel = vec2(1.0, 1.0) / uViewportSize;
        vec4 edge = (8.*pix -
            texture2D(uWireframe, vTextureCoord + vec2(-onePixel.x, -onePixel.y)) -
            texture2D(uWireframe, vTextureCoord + vec2(-onePixel.x, 0)) -
            texture2D(uWireframe, vTextureCoord + vec2(-onePixel.x, onePixel.y)) -
            texture2D(uWireframe, vTextureCoord + vec2(0, -onePixel.y)) -
            texture2D(uWireframe, vTextureCoord + vec2(0, onePixel.y)) -
            texture2D(uWireframe, vTextureCoord + vec2(onePixel.x, -onePixel.y)) -
            texture2D(uWireframe, vTextureCoord + vec2(onePixel.x, 0)) -
            texture2D(uWireframe, vTextureCoord + vec2(onePixel.x, onePixel.y)))/8. ;
        float edginess = edge.r*edge.r + edge.g*edge.g + edge.b*edge.b;
        if (edginess > 0.01) {
            gl_FragColor = vec4(1,1,1,1);
        } else {
            float y = 0.1+pix.a-0.2*(pix.b-0.5)*(pix.b-0.5);
            float u = 0.08*(pix.r-0.5)*(pix.r-0.5);
            float v = 0.12*(pix.g-0.5)*(pix.g-0.5);
            gl_FragColor=vec4(y,y+u,y+v,0.5);
        }
#ifdef GL_EXT_frag_depth
        float depthRep = pix.a;
        float ndc_depth = (exp(depthRep) - 1.0)/(exp(1.0) - 1.0);
        ndc_depth = (exp(ndc_depth) - 1.0)/(exp(1.0) - 1.0);
        float far = gl_DepthRange.far;
        float near = gl_DepthRange.near;
        gl_FragDepthEXT = (((far - near) * ndc_depth) + near + far) / 2.0;
#endif
        //gl_FragColor = vec4(dv.z, 0,0,1);
    }
}