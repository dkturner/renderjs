precision highp float;

attribute vec3 aVertexPosition;
attribute vec3 aVertexNormal;
attribute vec2 aTextureCoord;

uniform mat4 uModelMatrix;
uniform mat4 uCameraMatrix;
uniform mat4 uViewportMatrix;
uniform bool uWireframe;

varying lowp vec4 vColor;
varying highp vec2 vTextureCoord;
varying highp float vNormalizedDepth;

void main(void) {
    vec4 cameraSpace = uCameraMatrix * uModelMatrix * vec4(aVertexPosition, 1.0);
    vec4 clipSpace = uViewportMatrix * cameraSpace;
    gl_Position = clipSpace;
    if (uWireframe) {
        // calculate the near and far planes in camera space
        vec4 f_ = vec4(0,0,1,-1) * uViewportMatrix;
        vec4 n_ = vec4(0,0,1,1) * uViewportMatrix;
        float camNear = n_.w/n_.z;
        float camFar = f_.w/f_.z;
        vNormalizedDepth = (cameraSpace.z + camNear) / (camNear - camFar);
        vec4 c = uCameraMatrix * uModelMatrix * vec4(aVertexNormal, 0.0);
        vec3 cameraNormal = normalize(vec3(c.x, c.y, c.z));
        vColor = vec4(0.5*cameraNormal.xyz+vec3(0.5,0.5,0.5), 1);
    }
    vTextureCoord = aTextureCoord;
}